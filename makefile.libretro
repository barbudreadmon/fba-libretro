DEBUG = 0
DEBUG_ASAN = 0
DEBUG_UBSAN = 0
LIBRETRO_OPTIMIZATIONS = 1
FRONTEND_SUPPORTS_RGB565 = 1
HAVE_GRIFFIN = 0
# fastcall only works on x86_32
FASTCALL = 0
WANT_NEOGEOCD = 0
USE_SPEEDHACKS = 1
EXTERNAL_ZLIB = 0
TOAPLAN_SOUND_SAMPLES_HACK = 1
INCLUDE_7Z_SUPPORT = 1
PTR64 ?= 1
INCLUDE_CPLUSPLUS11_FILES = 0
BUILD_X64_EXE = 0

SPACE :=
SPACE := $(SPACE) $(SPACE)
BACKSLASH :=
BACKSLASH := \$(BACKSLASH)
filter_out1 = $(filter-out $(firstword $1),$1)
filter_out2 = $(call filter_out1,$(call filter_out1,$1))

# system platform
ifeq ($(platform),)
   platform = unix
   ifeq ($(shell uname -a),)
      platform = win
      EXE_EXT=.exe
   else ifneq ($(findstring Darwin,$(shell uname -a)),)
      platform = osx
      arch = intel
      ifeq ($(shell uname -p),powerpc)
         arch = ppc
      endif
   else ifneq ($(findstring MINGW,$(shell uname -a)),)
      platform = win
      EXE_EXT=.exe
   endif
else ifneq (,$(findstring armv,$(platform)))
   override platform += unix
else ifneq (,$(findstring rpi,$(platform)))
   override platform += unix
endif


MAIN_FBA_DIR	:= src
VERSION_SCRIPT	:= $(MAIN_FBA_DIR)/burner/libretro/link.T

INLINE_LIMIT=-finline-limit=1200

# GCC < 4.9 and clang does not support -fno-tree-loop-vectorize
ifeq ($(shell expr `gcc -dumpversion | cut -f1` \< 4.9), 1)
   INLINE_LIMIT=
endif
ifneq (, $(findstring clang,$(CC)))
   INLINE_LIMIT=
endif
ifneq (, $(findstring clang,$(CXX)))
   INLINE_LIMIT=
endif

# TARGET
TARGET_NAME := fbalpha

ifeq ($(PTR64), 1)
   FBA_DEFINES += -DPTR64
endif

# Unix
ifneq (,$(findstring unix,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(VERSION_SCRIPT)
   ENDIANNESS_DEFINES := -DLSB_FIRST

   # Raspberry Pi
   ifneq (,$(findstring rpi2,$(platform)))
      PLATFORM_DEFINES := -marm -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -ffast-math
   else ifneq (,$(findstring rpi3,$(platform)))
      PLATFORM_DEFINES := -marm -mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard -ffast-math
   endif

   # Solaris
   ifneq (,$(findstring solaris,$(platform)))
      CC := gcc
      SHARED := -shared
   endif

   # Generic ARM
   ifneq (,$(findstring armv,$(platform)))
      PLATFORM_DEFINES :=
      ifneq (,$(findstring android,$(platform)))
         CC = arm-linux-androideabi-gcc
         CXX = arm-linux-androideabi-g++
         PLATFORM_DEFINES += -DANDROID -Dlog2\(x\)=\(log\(x\)/1.4426950408889634\)
      endif
   endif

# OS X
else ifeq ($(platform), osx)
   TARGET := $(TARGET_NAME)_libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   ifeq ($(arch),ppc)
      ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN
   else
      ENDIANNESS_DEFINES := -DLSB_FIRST
   endif
   OSXVER = `sw_vers -productVersion | cut -d. -f 2`
   OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
   ifeq ($(OSX_LT_MAVERICKS),"YES")
      fpic += -mmacosx-version-min=10.5
   endif
   ifndef ($(NOUNIVERSAL))
      CFLAGS += $(ARCHFLAGS)
      CXXFLAGS += $(ARCHFLAGS)
      LDFLAGS += $(ARCHFLAGS)
   endif

# iOS
else ifneq (,$(findstring ios,$(platform)))
   TARGET := $(TARGET_NAME)_libretro_ios.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   ifeq ($(IOSSDK),)
      IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
   endif
   ifeq ($(platform),ios-arm64)
      CC = cc -arch arm64 -isysroot $(IOSSDK)
      CXX = c++ -arch arm64 -isysroot $(IOSSDK)
   else
      CC = cc -arch armv7 -isysroot $(IOSSDK)
      CXX = c++ -arch armv7 -isysroot $(IOSSDK)
   endif
   ENDIANNESS_DEFINES := -DLSB_FIRST
   ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
      CFLAGS += -DIOS9
      CXXFLAGS += -DIOS9
      CC += -miphoneos-version-min=8.0
      CXX +=  -miphoneos-version-min=8.0
      CFLAGS += -miphoneos-version-min=8.0
   else
      CFLAGS += -DIOS
      CXXFLAGS += -DIOS
      CC += -miphoneos-version-min=5.0
      CXX +=  -miphoneos-version-min=5.0
      CFLAGS += -miphoneos-version-min=5.0
   endif

# Theos iOS
else ifeq ($(platform), theos_ios)
   DEPLOYMENT_IOSVERSION = 5.0
   TARGET = iphone:latest:$(DEPLOYMENT_IOSVERSION)
   ARCHS = armv7 armv7s
   TARGET_IPHONEOS_DEPLOYMENT_VERSION=$(DEPLOYMENT_IOSVERSION)
   THEOS_BUILD_DIR := objs
   include $(THEOS)/makefiles/common.mk
   LIBRARY_NAME = $(TARGET_NAME)_libretro_ios
   ENDIANNESS_DEFINES := -DLSB_FIRST
   CFLAGS += -DIOS

# QNX
else ifeq ($(platform), qnx)
   TARGET := $(TARGET_NAME)_libretro_$(platform).so
   fpic := -fPIC
   SHARED := -lcpp -lm -shared -Wl,-no-undefined -Wl,--version-script=$(VERSION_SCRIPT)
   ENDIANNESS_DEFINES := -DLSB_FIRST
   CC = qcc -Vgcc_ntoarmv7le
   CXX = QCC -Vgcc_ntoarmv7le_cpp
   AR = qcc -Vgcc_ntoarmv7le
   PLATFORM_DEFINES := -D__BLACKBERRY_QNX__ -marm -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp

# PS3
else ifneq (,$(filter $(platform), ps3 sncps3 psl1ght))
   TARGET := $(TARGET_NAME)_libretro_ps3.a
   ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN
   PLATFORM_DEFINES += -D__CELLOS_LV2__
   EXTERNAL_ZLIB = 1
   STATIC_LINKING = 1

   # sncps3
   ifneq (,$(findstring sncps3,$(platform)))
      PLATFORM_DEFINES += -DSN_TARGET_PS3
      CXX = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe

   # PS3
   else ifneq (,$(findstring ps3,$(platform)))
      CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
      CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
      AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe

   # Lightweight PS3 Homebrew SDK
   else ifneq (,$(findstring psl1ght,$(platform)))
      TARGET := $(TARGET_NAME)_libretro_$(platform).a
      CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
      CXX = $(PS3DEV)/ppu/bin/ppu-g++$(EXE_EXT)
      AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
   endif

# Vita
else ifeq ($(platform), vita)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = arm-vita-eabi-gcc$(EXE_EXT)
   CC_AS = arm-vita-eabi-gcc$(EXE_EXT)
   CXX = arm-vita-eabi-g++$(EXE_EXT)
   AR = arm-vita-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES += -DVITA
   ENDIANNESS_DEFINES := -DLSB_FIRST
   CFLAGS += -mfloat-abi=hard -ffast-math -fsingle-precision-constant
   CXXFLAGS += -mfloat-abi=hard -ffast-math -fsingle-precision-constant -fpermissive -fno-rtti -fno-exceptions
   EXTERNAL_ZLIB = 1
   STATIC_LINKING = 1

# Xbox 360
else ifeq ($(platform), xenon)
   TARGET := $(TARGET_NAME)_libretro_xenon360.a
   CC = xenon-gcc$(EXE_EXT)
   CXX = xenon-g++$(EXE_EXT)
   AR = xenon-ar$(EXE_EXT)
   ENDIANNESS_DEFINES = -DWORDS_BIGENDIAN
   PLATFORM_DEFINES := -D__LIBXENON__ -m32 -D__ppc__
   STATIC_LINKING = 1

# Nintendo Switch (libtransistor)
else ifeq ($(platform), switch)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   include $(LIBTRANSISTOR_HOME)/libtransistor.mk
   STATIC_LINKING=1
   ENDIANNESS_DEFINES := -DLSB_FIRST
   PLATFORM_DEFINES := -marm -mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard -ffast-math

# Nintendo Game Cube / Wii / WiiU
else ifneq (,$(filter $(platform), ngc wii wiiu))
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   PATH := $(PATH):$(DEVKITPPC)/bin
   CC = powerpc-eabi-gcc$(EXE_EXT)
   CXX = powerpc-eabi-g++$(EXE_EXT)
   AR = powerpc-eabi-ar$(EXE_EXT)
   ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN
   PLATFORM_DEFINES := -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int -UPPC
   EXTERNAL_ZLIB = 1
   STATIC_LINKING = 1
   PTR64 = 0

   # Nintendo WiiU
   ifneq (,$(findstring wiiu,$(platform)))
      PLATFORM_DEFINES += -DGEKKO -DWIIU -DHW_RVL -mwup -mcpu=750 -meabi -mhard-float

   # Nintendo Wii
   else ifneq (,$(findstring wii,$(platform)))
      PLATFORM_DEFINES += -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float
      NO_MD = 1
      NO_CAPCOM = 1
      NO_NEOGEO = 1
      NO_PCE = 1

   # Nintendo Game Cube
   else ifneq (,$(findstring ngc,$(platform)))
      PLATFORM_DEFINES += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float
      NO_MD = 1
      NO_CAPCOM = 1
      NO_NEOGEO = 1
      NO_PCE = 1
   endif

# Emscripten
else ifeq ($(platform), emscripten)
   TARGET := $(TARGET_NAME)_libretro_$(platform).bc
   ENDIANNESS_DEFINES := -DLSB_FIRST -DNO_UNALIGNED_MEM

# Windows MSVC 2017 all architectures
else ifneq (,$(findstring windows_msvc2017,$(platform)))

    ENDIANNESS_DEFINES := -DLSB_FIRST

	PlatformSuffix = $(subst windows_msvc2017_,,$(platform))
	ifneq (,$(findstring desktop,$(PlatformSuffix)))
		WinPartition = desktop
		MSVC2017CompileFlags = -DWINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP -FS -D_USE_MATH_DEFINES
		LDFLAGS += -MANIFEST -LTCG:incremental -NXCOMPAT -DYNAMICBASE -DEBUG -OPT:REF -INCREMENTAL:NO -SUBSYSTEM:WINDOWS -MANIFESTUAC:"level='asInvoker' uiAccess='false'" -OPT:ICF -ERRORREPORT:PROMPT -NOLOGO -TLBID:1
		LIBS += kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib
	else ifneq (,$(findstring uwp,$(PlatformSuffix)))
		WinPartition = uwp
		MSVC2017CompileFlags = -DWINAPI_FAMILY=WINAPI_FAMILY_APP -DWINDLL -D_UNICODE -DUNICODE -DWRL_NO_DEFAULT_LIB -FS -D_USE_MATH_DEFINES
		LDFLAGS += -APPCONTAINER -NXCOMPAT -DYNAMICBASE -MANIFEST:NO -LTCG -OPT:REF -SUBSYSTEM:CONSOLE -MANIFESTUAC:NO -OPT:ICF -ERRORREPORT:PROMPT -NOLOGO -TLBID:1 -DEBUG:FULL -WINMD:NO
		LIBS += WindowsApp.lib
	endif

	CFLAGS += $(MSVC2017CompileFlags)
	CXXFLAGS += $(MSVC2017CompileFlags)

	TargetArchMoniker = $(subst $(WinPartition)_,,$(PlatformSuffix))

	CC  = cl.exe
	CXX = cl.exe
	LD = link.exe

	reg_query = $(call filter_out2,$(subst $2,,$(shell reg query "$2" -v "$1" 2>nul)))
	fix_path = $(subst $(SPACE),\ ,$(subst \,/,$1))

	ProgramFiles86w := $(shell cmd /c "echo %PROGRAMFILES(x86)%")
	ProgramFiles86 := $(shell cygpath "$(ProgramFiles86w)")

	WindowsSdkDir ?= $(call reg_query,InstallationFolder,HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v10.0)
	WindowsSdkDir ?= $(call reg_query,InstallationFolder,HKEY_CURRENT_USER\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v10.0)
	WindowsSdkDir ?= $(call reg_query,InstallationFolder,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0)
	WindowsSdkDir ?= $(call reg_query,InstallationFolder,HKEY_CURRENT_USER\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0)
	WindowsSdkDir := $(WindowsSdkDir)

	WindowsSDKVersion ?= $(firstword $(foreach folder,$(subst $(subst \,/,$(WindowsSdkDir)Include/),,$(wildcard $(call fix_path,$(WindowsSdkDir)Include\*))),$(if $(wildcard $(call fix_path,$(WindowsSdkDir)Include/$(folder)/um/Windows.h)),$(folder),)))$(BACKSLASH)
	WindowsSDKVersion := $(WindowsSDKVersion)

	VsInstallBuildTools = $(ProgramFiles86)/Microsoft Visual Studio/2017/BuildTools
	VsInstallEnterprise = $(ProgramFiles86)/Microsoft Visual Studio/2017/Enterprise
	VsInstallProfessional = $(ProgramFiles86)/Microsoft Visual Studio/2017/Professional
	VsInstallCommunity = $(ProgramFiles86)/Microsoft Visual Studio/2017/Community

	VsInstallRoot ?= $(shell if [ -d "$(VsInstallBuildTools)" ]; then echo "$(VsInstallBuildTools)"; fi)
	ifeq ($(VsInstallRoot), )
		VsInstallRoot = $(shell if [ -d "$(VsInstallEnterprise)" ]; then echo "$(VsInstallEnterprise)"; fi)
	endif
	ifeq ($(VsInstallRoot), )
		VsInstallRoot = $(shell if [ -d "$(VsInstallProfessional)" ]; then echo "$(VsInstallProfessional)"; fi)
	endif
	ifeq ($(VsInstallRoot), )
		VsInstallRoot = $(shell if [ -d "$(VsInstallCommunity)" ]; then echo "$(VsInstallCommunity)"; fi)
	endif
	VsInstallRoot := $(VsInstallRoot)

	VcCompilerToolsVer := $(shell cat "$(VsInstallRoot)/VC/Auxiliary/Build/Microsoft.VCToolsVersion.default.txt" | grep -o '[0-9\.]*')
	VcCompilerToolsDir := $(VsInstallRoot)/VC/Tools/MSVC/$(VcCompilerToolsVer)

	WindowsSDKSharedIncludeDir := $(shell cygpath -w "$(WindowsSdkDir)\Include\$(WindowsSDKVersion)\shared")
	WindowsSDKUCRTIncludeDir := $(shell cygpath -w "$(WindowsSdkDir)\Include\$(WindowsSDKVersion)\ucrt")
	WindowsSDKUMIncludeDir := $(shell cygpath -w "$(WindowsSdkDir)\Include\$(WindowsSDKVersion)\um")
	WindowsSDKUCRTLibDir := $(shell cygpath -w "$(WindowsSdkDir)\Lib\$(WindowsSDKVersion)\ucrt\$(TargetArchMoniker)")
	WindowsSDKUMLibDir := $(shell cygpath -w "$(WindowsSdkDir)\Lib\$(WindowsSDKVersion)\um\$(TargetArchMoniker)")

	# For some reason the HostX86 compiler doesn't like compiling for x64
	# ("no such file" opening a shared library), and vice-versa.
	# Work around it for now by using the strictly x86 compiler for x86, and x64 for x64.
	# NOTE: What about ARM?
	ifneq (,$(findstring x64,$(TargetArchMoniker)))
		VCCompilerToolsBinDir := $(VcCompilerToolsDir)\bin\HostX64
	else
		VCCompilerToolsBinDir := $(VcCompilerToolsDir)\bin\HostX86
	endif

	PATH := $(shell IFS=$$'\n'; cygpath "$(VCCompilerToolsBinDir)/$(TargetArchMoniker)"):$(PATH)
	PATH := $(PATH):$(shell IFS=$$'\n'; cygpath "$(VsInstallRoot)/Common7/IDE")
	INCLUDE := $(shell IFS=$$'\n'; cygpath -w "$(VcCompilerToolsDir)/include")
	LIB := $(shell IFS=$$'\n'; cygpath -w "$(VcCompilerToolsDir)/lib/$(TargetArchMoniker)")

	export INCLUDE := $(INCLUDE);$(WindowsSDKSharedIncludeDir);$(WindowsSDKUCRTIncludeDir);$(WindowsSDKUMIncludeDir)
	export LIB := $(LIB);$(WindowsSDKUCRTLibDir);$(WindowsSDKUMLibDir)
	TARGET := $(TARGET_NAME)_libretro.dll
	PSS_STYLE :=2
	LDFLAGS += -DLL

# Windows
else
   TARGET := $(TARGET_NAME)_libretro.dll
   CC = gcc
   CXX = g++
   SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(VERSION_SCRIPT)
   LDFLAGS += -static-libgcc -static-libstdc++
   ENDIANNESS_DEFINES := -DLSB_FIRST

endif

CC_SYSTEM = gcc
CXX_SYSTEM = g++

include makefile.libretro_common

FBA_CXXOBJ := $(SOURCES_CXX:.cpp=.o)
FBA_COBJ := $(SOURCES_C:.c=.o)

OBJS := $(FBA_COBJ) $(FBA_CXXOBJ)

FBA_DEFINES += -D__LIBRETRO__ \
	$(ENDIANNESS_DEFINES) \
	$(PLATFORM_DEFINES)

INCFLAGS := $(foreach dir,$(INCLUDE_DIRS),-I$(dir))

ifeq ($(LIBRETRO_OPTIMIZATIONS), 1)
   FBA_DEFINES += -D__LIBRETRO_OPTIMIZATIONS__
   GENERATE_OPTS := -D__LIBRETRO_OPTIMIZATIONS__
else
   GENERATE_OPTS :=
endif

ifeq ($(USE_SPEEDHACKS), 1)
   FBA_DEFINES += -DUSE_SPEEDHACKS
endif

ifeq ($(FASTCALL), 1)
   FBA_DEFINES += -DFASTCALL
endif

ifeq ($(TOAPLAN_SOUND_SAMPLES_HACK), 1)
   FBA_DEFINES += -DTOAPLAN_SOUND_SAMPLES_HACK
endif

ifeq ($(DEBUG_ASAN), 1)
   DEBUG = 1
   DEBUG_UBSAN = 0
   CFLAGS += -lasan -fsanitize=address
   CXXFLAGS += -lasan -fsanitize=address
   LDFLAGS += -lasan -fsanitize=address
endif

ifeq ($(DEBUG_UBSAN), 1)
   DEBUG = 1
   CFLAGS += -lubsan -fsanitize=undefined
   CXXFLAGS += -lubsan -fsanitize=undefined
   LDFLAGS += -lubsan -fsanitize=undefined
endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g -DFBA_DEBUG
   CXXFLAGS += -O0 -g -DFBA_DEBUG
else
   ifeq (,$(findstring msvc,$(platform)))
      CFLAGS += -O3 -DNDEBUG
      CXXFLAGS += -O3 -DNDEBUG
   else
      CFLAGS += -O2 -DNDEBUG
      CXXFLAGS += -O2 -DNDEBUG
   endif
endif

CFLAGS += $(fpic) $(FBA_DEFINES)
CXXFLAGS += $(fpic) $(FBA_DEFINES)
LDFLAGS += $(fpic)

ifeq (,$(findstring msvc,$(platform)))
   CFLAGS += -fforce-addr $(INLINE_LIMIT)  \
      -Wall -Wno-long-long -Wno-sign-compare -Wno-uninitialized -Wno-unused \
      -Wno-sequence-point -Wno-strict-aliasing
   CXXFLAGS += -fforce-addr $(INLINE_LIMIT) \
      -fcheck-new \
      -Wall -W -Wshadow -Wno-long-long -Wno-write-strings \
      -Wunknown-pragmas -Wundef -Wno-conversion -Wno-missing-braces -Wno-multichar \
      -Wuninitialized -Wpointer-arith -Wno-inline -Wno-unused-value \
      -Wno-sequence-point -Wno-extra -Wno-strict-aliasing

   ifeq (,$(filter $(platform), ps3 sncps3))
      CFLAGS += -Wno-write-strings -Wno-pedantic
      CXXFLAGS += -Wno-write-strings -pedantic -Wno-address -Wno-unused-but-set-variable -Wno-narrowing -Wno-pedantic
   endif
endif

ifeq ($(FRONTEND_SUPPORTS_RGB565), 1)
   CFLAGS += -DFRONTEND_SUPPORTS_RGB565
   CXXFLAGS += -DFRONTEND_SUPPORTS_RGB565
endif

PERL = perl$(EXE_EXT)
M68KMAKE_EXE = m68kmake$(EXE_EXT)
CTVMAKE_EXE = ctvmake$(EXE_EXT)
PGM_SPRITE_CREATE_EXE = pgmspritecreate$(EXE_EXT)
EXE_PREFIX = ./

.PHONY: clean generate-files generate-files-clean clean-objs

ifeq ($(platform), theos_ios)
	COMMON_FLAGS := -DIOS -DARM $(COMMON_DEFINES) $(INCFLAGS) -I$(THEOS_INCLUDE_PATH) -Wno-error
	$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
	$(LIBRARY_NAME)_CXXFLAGS += $(CXXFLAGS) $(COMMON_FLAGS)
	${LIBRARY_NAME}_FILES = $(SOURCES_CXX) $(SOURCES_C)
	include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)


generate-files-clean:
	rm -rf $(FBA_GENERATED_DIR)/
	rm -rf $(FBA_CPU_DIR)/m68k/m68kops.c
	rm -rf $(FBA_CPU_DIR)/m68k/m68kops.h

generate-files:
	@mkdir -p $(FBA_GENERATED_DIR) 2>/dev/null || /bin/true
	@echo "Generating $(FBA_GENERATED_DIR)/driverlist.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/gamelist.pl -o $(FBA_GENERATED_DIR)/driverlist.h -l gamelist.txt $(FBA_BURN_DRIVERS_DIR) $(FBA_BURN_DRIVERS_DIR)/capcom $(FBA_BURN_DRIVERS_DIR)/cave $(FBA_BURN_DRIVERS_DIR)/coleco $(FBA_BURN_DRIVERS_DIR)/cps3 $(FBA_BURN_DRIVERS_DIR)/dataeast $(FBA_BURN_DRIVERS_DIR)/galaxian $(FBA_BURN_DRIVERS_DIR)/irem $(FBA_BURN_DRIVERS_DIR)/konami $(FBA_BURN_DRIVERS_DIR)/megadrive $(MIDWAY_DIR) $(FBA_BURN_DRIVERS_DIR)/msx $(FBA_BURN_DRIVERS_DIR)/neogeo $(FBA_BURN_DRIVERS_DIR)/pce $(FBA_BURN_DRIVERS_DIR)/pgm $(FBA_BURN_DRIVERS_DIR)/pre90s $(FBA_BURN_DRIVERS_DIR)/psikyo $(FBA_BURN_DRIVERS_DIR)/pst90s $(FBA_BURN_DRIVERS_DIR)/sega $(FBA_BURN_DRIVERS_DIR)/sg1000 $(SMS_DIR) $(FBA_BURN_DRIVERS_DIR)/snes $(FBA_BURN_DRIVERS_DIR)/taito $(FBA_BURN_DRIVERS_DIR)/toaplan
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/neo_sprite_func.h..."
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/neo_sprite_func_table.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/neo_sprite_func.pl -o $(FBA_GENERATED_DIR)/neo_sprite_func.h $(LIBRETRO_OPTIMIZATIONS)
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/psikyo_tile_func.h..."
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/psikyo_tile_func_table.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/psikyo_tile_func.pl -o $(FBA_GENERATED_DIR)/psikyo_tile_func.h
	@echo "Generating $(FBA_GENERATED_DIR)/cave_sprite_func.h..."
	@echo ""
	@echo "Generating[ $(FBA_GENERATED_DIR)/cave_tile_func_table.h"
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/cave_sprite_func.pl -o $(FBA_GENERATED_DIR)/cave_sprite_func.h
	$(PERL) $(FBA_SCRIPTS_DIR)/cave_tile_func.pl -o $(FBA_GENERATED_DIR)/cave_tile_func.h
	@echo ""
	@echo "Generate $(FBA_GENERATED_DIR)/toa_gp9001_func_table.h"
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/toa_gp9001_func.pl -o $(FBA_GENERATED_DIR)/toa_gp9001_func.h
	$(CXX_SYSTEM) $(GENERATE_OPTS) -o $(PGM_SPRITE_CREATE_EXE) $(FBA_BURN_DRIVERS_DIR)/pgm/pgm_sprite_create.cpp
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/pgm_sprite.h..."
	@echo ""
	$(EXE_PREFIX)$(PGM_SPRITE_CREATE_EXE) > $(FBA_GENERATED_DIR)/pgm_sprite.h
	$(CC_SYSTEM) $(GENERATE_OPTS) -o $(M68KMAKE_EXE) $(FBA_CPU_DIR)/m68k/m68kmake.c
	$(EXE_PREFIX)$(M68KMAKE_EXE) $(FBA_CPU_DIR)/m68k/ $(FBA_CPU_DIR)/m68k/m68k_in.c
	$(CXX_SYSTEM) $(GENERATE_OPTS) -o $(CTVMAKE_EXE) $(FBA_BURN_DRIVERS_DIR)/capcom/ctv_make.cpp
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/ctv.h..."
	@echo ""
	$(EXE_PREFIX)$(CTVMAKE_EXE) > $(FBA_GENERATED_DIR)/ctv.h

OBJOUT   = -o
LINKOUT  = -o

ifneq (,$(findstring msvc,$(platform)))
	OBJOUT = -Fo
	LINKOUT = -out:
ifeq ($(STATIC_LINKING),1)
	LD ?= lib.exe
	STATIC_LINKING=0
else
	LD = link.exe
endif
else
	LD = $(CXX)
endif

%.o: %.c
	$(CC) -c $(OBJOUT)$@ $< $(CFLAGS) $(INCFLAGS)

%.o: %.cpp
	$(CXX) -c $(OBJOUT)$@ $< $(CXXFLAGS) $(INCFLAGS)

$(TARGET): $(OBJS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJS)
else
	$(LD) $(LINKOUT)$@ $(SHARED) $^ $(LDFLAGS) $(LIBS)
endif

clean-objs:
	rm -f $(OBJS)

clean:
	rm -f $(TARGET)
	rm -f $(OBJS)
	rm -f $(M68KMAKE_EXE)
	rm -f $(PGM_SPRITE_CREATE_EXE)
	rm -f $(CTVMAKE_EXE)
endif
